57%的用户更在乎网页在3秒内是否完成加载。
52%的在线用户认为网页打开速度影响到他们对网站的忠实度。
每慢1秒造成页面 PV 降低11%，用户满意度也随之降低降低16%。
近半数移动用户因为在10秒内仍未打开页面从而放弃。
选择在 serviceWorker 里对资源做预载和页面预渲染
减小首屏渲染时间，还有一个途径就是，提取首屏的CSS样式，分离出来直接放进html，这样可以避免花太多时间渲染界面。
const data = {};
const input = document.getElementById('input');
Object.defineProperty(data, 'text', {
  set(value) {
    input.value = value;
    this.value = value;
  }
});
input.onChange = function(e) {
  data.text = e.target.value;
}
7eba17a4ca3b1a8346
https://www.dnsperf.com/  既可以查看不同服务商的DNS lookup time，还可以查看具体的波动，更加可以通过域名查看它在各个地区的DNS lookup time
father:before{
  content：""；
  display：inline-block；
  vertical-align:middle;
  height: 100%;
}
child{
  display：inline-block；
  vertical-align:middle;
}
如果想让浏览器能访问到其他的 响应头的话 需要在服务器上设置 Access-Control-Expose-Header
// 压缩图片
    compress (img, size, setSize) {
      let canvas = document.createElement('canvas')
      let ctx = canvas.getContext('2d')
      // var initSize = img.src.length
      // var width = img.width
      // var height = img.height
      const {width, height} = img
      console.log(img, width, height, '宽高')

      // 如果图片大于四百万像素，计算压缩比并将大小压至400万以下
      // let ratio = 1
      // if ((ratio = width * height / 4000000) > 1) {
      //   // ratio = Math.sqrt(ratio)
      //   // width /= ratio
      //   // height /= ratio
      //   ratio = 1
      // } else {
      //   ratio = 1
      // }

      // canvas.width = width
      // canvas.height = height

      // // //  铺底色
      // // ctx.fillStyle = '#ddd'
      // ctx.fillRect(0, 0, canvas.width, canvas.height)

      // // // 如果图片像素大于100万则使用瓦片绘制
      // var count
      // if ((count = width * height / 1000000) > 1) {
      //   count = (Math.sqrt(count) + 1) // 计算要分成多少块瓦片
      //   // 计算每块瓦片的宽和高
      //   var nw = (width / count)
      //   var nh = (height / count)

      //   tCanvas.width = nw
      //   tCanvas.height = nh

      //   for (var i = 0; i < count; i++) {
      //     for (var j = 0; j < count; j++) {
      //       tctx.drawImage(img, i * nw * ratio, j * nh * ratio, nw * ratio, nh * ratio, 0, 0, nw, nh)

      //       ctx.drawImage(tCanvas, i * nw, j * nh, nw, nh)
      //     }
      //   }
      // } else {
      //   ctx.drawImage(img, 0, 0, width, height)
      // }
      // let img = document.getElementById('canvasImg')
      ctx.drawImage(img, 0, 0, width, height)
      // 进行最小压缩
      let ndata = canvas.toDataURL('image/jpeg', 0.1)

      console.log('压缩前：' + size)
      this.canvasUrl = ndata
      console.log('压缩后：' + this.canvasUrl, ndata.length / 1024)
      console.log('压缩率：' + (100 * (size - ndata.length) / size) + '%')

      // tCanvas.width = tCanvas.height = canvas.width = canvas.height = 0
      ndata = ndata.split(',')[1]
      ndata = window.atob(ndata)
      let ia = new Uint8Array(ndata.length)
      for (var i = 0; i < ndata.length; i++) {
        ia[i] = ndata.charCodeAt(i)
      }
      // uploadCanvas.toDataURL 返回的默认格式就是 image/png
      var blob = new Blob([ia], {
        type: 'image/jpeg'
      })

      let formdata = new FormData()
      formdata.append('file', blob, 'jpeg')
      formdata.append('bean', this.bean)
      formdata.append('file_size', setSize)
      event.target.value = ''
      this.ajaxUpload(formdata)
    },
windows 下的 vue 项目可以找到以下路径

./node_modules/.bin/webpack-dev-server.cmd
添加 --max-old-space-size=4096

@IF EXIST "%~dp0\node.exe" (
  "%~dp0\node.exe"  "%~dp0\..\webpack-dev-server\bin\webpack-dev-server.js" %*
) ELSE (
  @SETLOCAL
  @SET PATHEXT=%PATHEXT:;.JS;=;%
  node  --max-old-space-size=4096 "%~dp0\..\webpack-dev-server\bin\webpack-dev-server.js" %*
)
